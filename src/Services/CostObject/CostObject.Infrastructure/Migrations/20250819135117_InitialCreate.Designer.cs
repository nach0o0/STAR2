// <auto-generated />
using System;
using CostObject.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CostObject.Infrastructure.Migrations
{
    [DbContext(typeof(CostObjectDbContext))]
    [Migration("20250819135117_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CostObject.Domain.Entities.CostObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HierarchyLevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCostObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyLevelId");

                    b.HasIndex("LabelId");

                    b.HasIndex("ParentCostObjectId");

                    b.ToTable("CostObjects", (string)null);
                });

            modelBuilder.Entity("CostObject.Domain.Entities.CostObjectRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApproverEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CostObjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReassignmentCostObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("text");

                    b.Property<Guid>("RequesterEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CostObjectId");

                    b.ToTable("CostObjectRequests", (string)null);
                });

            modelBuilder.Entity("CostObject.Domain.Entities.HierarchyDefinition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RequiredBookingLevelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeGroupId", "Name")
                        .IsUnique();

                    b.ToTable("HierarchyDefinitions", (string)null);
                });

            modelBuilder.Entity("CostObject.Domain.Entities.HierarchyLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<Guid>("HierarchyDefinitionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyDefinitionId");

                    b.ToTable("HierarchyLevels", (string)null);
                });

            modelBuilder.Entity("CostObject.Domain.Entities.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeGroupId", "Name")
                        .IsUnique();

                    b.ToTable("Labels", (string)null);
                });

            modelBuilder.Entity("CostObject.Domain.Entities.CostObject", b =>
                {
                    b.HasOne("CostObject.Domain.Entities.HierarchyLevel", null)
                        .WithMany()
                        .HasForeignKey("HierarchyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CostObject.Domain.Entities.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelId");

                    b.HasOne("CostObject.Domain.Entities.CostObject", null)
                        .WithMany()
                        .HasForeignKey("ParentCostObjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CostObject.Domain.Entities.CostObjectRequest", b =>
                {
                    b.HasOne("CostObject.Domain.Entities.CostObject", null)
                        .WithMany()
                        .HasForeignKey("CostObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CostObject.Domain.Entities.HierarchyLevel", b =>
                {
                    b.HasOne("CostObject.Domain.Entities.HierarchyDefinition", null)
                        .WithMany()
                        .HasForeignKey("HierarchyDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
